// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  firstName String
  lastName  String?
  username  String @unique
  email     String @unique
  password  String
  bio       String?
  avatar    String?
  photos  Photo[]
  likes Like[]
  comments Comment[]
  rooms Room[]
  messages Message[]

  followers User[]   @relation("FollowRelation", references: [id])
  following User[]   @relation("FollowRelation", references: [id])
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}


model Photo {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  file      String
  caption   String?
  hashtags  Hashtag[]
  likes Like[]
  comments Comment[]
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  photos    Photo[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
model Like{
  id        Int      @id @default(autoincrement()) 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  photo Photo @relation(fields: [photoId], references: [id],onDelete: Cascade)
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  photoId Int

  @@unique([photoId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement()) 
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  photo Photo @relation(fields: [photoId],references: [id],onDelete: Cascade)
  userId Int
  photoId Int
  payload String
}
model Room {
    id        Int      @id @default(autoincrement()) 
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
    users User[]
    message Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id],onDelete: Cascade)
  roomId    Int
  read Boolean @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

}